# Java Client Template

> A structured template for building scalable web clients using Spring Boot, designed for seamless integration with Cyoda over gRPC and REST. Features workflow-driven backend interactions with fluent serialization APIs for type-safe processing.

## Documentation

default branch: main
- [README](https://github.com/Cyoda-platform/java-client-template/${branch}/README.md): Complete project documentation including setup, architecture, and workflow configuration
- [Usage Rules](https://github.com/Cyoda-platform/java-client-template/${branch}/usage-rules.md): Developer and AI agent guidelines for following project conventions
- [Augment Guidelines](https://github.com/Cyoda-platform/java-client-template/${branch}/.augment-guidelines): Project overview and development workflow guidelines

## Code Examples

- Complete examples and templates for all components
  - [Code Examples](https://github.com/Cyoda-platform/java-client-template/${branch}/src/test/java/com/example/): Implementation examples
    - [Controllers](https://github.com/Cyoda-platform/java-client-template/${branch}/src/test/java/com/example/controller/): REST controller patterns
    - [Entities](https://github.com/Cyoda-platform/java-client-template/${branch}/src/test/java/com/example/entity/): Entity class implementations
    - [Processors](https://github.com/Cyoda-platform/java-client-template/${branch}/src/test/java/com/example/processor/): Workflow processor examples
    - [Criteria](https://github.com/Cyoda-platform/java-client-template/${branch}/src/test/java/com/example/criterion/): Workflow criteria examples
    - [Patterns](https://github.com/Cyoda-platform/java-client-template/${branch}/llm_example/code/patterns/): Patterns and anti-patterns guide
  - [Configuration Examples](https://github.com/Cyoda-platform/java-client-template/${branch}/src/test/resources/example/config/): Configuration templates
    - [Workflow Configs](https://github.com/Cyoda-platform/java-client-template/${branch}/src/test/resources/example/config/workflow/): Workflow JSON configuration templates

```
java-client-template/
‚îú‚îÄ‚îÄ src/main/java/com/java_template/
‚îÇ   ‚îú‚îÄ‚îÄ common/                          # Framework code - DO NOT MODIFY
‚îÇ   ‚îî‚îÄ‚îÄ application/                     # Your business logic (usually empty in template)
      ‚îú‚îÄ‚îÄ controller/                    # REST endpoints (usually empty in template)
      ‚îú‚îÄ‚îÄ entity/                        # Domain entities (usually empty in template)
      ‚îú‚îÄ‚îÄ processor/                     # Workflow processors (usually empty in template)
      ‚îî‚îÄ‚îÄ criterion/                     # Workflow criteria (usually empty in template)
‚îÇ   ‚îî‚îÄ‚îÄ resources/                       # Configuration files (usually empty in template)
‚îÇ       ‚îî‚îÄ‚îÄ workflow/                    # Workflow configurations (usually empty in template)
‚îú‚îÄ‚îÄ src/test/java/com/example/           # Compilable examples and templates
‚îÇ   ‚îú‚îÄ‚îÄ application/                     # Example implementations
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ controller/                  # REST controller examples
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ entity/                      # Entity implementation examples
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ processor/                   # Processor implementation examples
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ criterion/                   # Criterion implementation examples
‚îÇ   ‚îú‚îÄ‚îÄ test/resources/example/config/workflow/ # Workflow configuration examples
```

## Requirements & Specifications

- [Functional Requirements](https://github.com/Cyoda-platform/java-client-template/${branch}/src/main/java/com/java_template/prototype/functional_requirement.md): Detailed functional requirements for the user application
- [User Requirements](https://github.com/Cyoda-platform/java-client-template/${branch}/src/main/java/com/java_template/prototype/user_requirement.md): User-focused requirements specification for the user application

## Configuration

- [Build Configuration](https://github.com/Cyoda-platform/java-client-template/${branch}/build.gradle): Gradle build configuration with dependencies and plugins
- [Environment Template](https://github.com/Cyoda-platform/java-client-template/${branch}/.env.template): Environment variables template for Cyoda integration

---

# README.md

# Java Client Template

A structured template for building scalable web clients using **Spring Boot**, designed for seamless integration with **Cyoda** over **gRPC** and **REST**.

---

## üöÄ Features

- **Spring Boot**-based fast backend starter.
- Modular, extensible structure for rapid iteration.
- Built-in support for **gRPC** and **REST** APIs.
- Integration with **Cyoda**: workflow-driven backend interactions.
- Serialization architecture with fluent APIs for type-safe processing.

---

## üõ†Ô∏è Getting Started

> ‚òï **Java 21 Required**
> Make sure Java 21 is installed and set as the active version.

### 1. Clone the Project

```bash
git clone https://github.com/Cyoda-platform/java-client-template.git
cd java-client-template
```

### 2. üß∞ Run Workflow Import Tool

#### Option 1: Run via Gradle (recommended for local development)
```bash
./gradlew runApp -PmainClass=com.java_template.common.tool.WorkflowImportTool
```

#### Option 2: Build and Run JAR (recommended for CI or scripting)
```bash
./gradlew bootJarWorkflowImport
java -jar build/libs/java-client-template-1.0-SNAPSHOT-workflow-import.jar
```

### 3. ‚ñ∂Ô∏è Run the Application

#### Option 1: Run via Gradle
```bash
./gradlew runApp
```

#### Option 2: Run Manually After Build
```bash
./gradlew build
java -jar build/libs/java-client-template-1.0-SNAPSHOT.jar
```

> Access the app: [http://localhost:8080/swagger-ui/index.html](http://localhost:8080/swagger-ui/index.html)
>
> **Note**: The default port is 8080 as configured in `src/main/resources/application.yml`. You can change this by setting the `server.port` property.

---

## üß© Project Structure

This template follows a clear separation between **framework code** (that you don't modify) and **application code** (where you implement your business logic).

### `src/main/java/com/java_template/common/` - Framework Code (DO NOT MODIFY)

**Core Framework Components:**
- `auth/` ‚Äì Authentication & token management for Cyoda integration
- `config/` ‚Äì Configuration classes, constants, and environment variable handling
- `dto/` ‚Äì Data transfer objects including `EntityWithMetadata<T>` wrapper
- `grpc/` ‚Äì gRPC client integration with Cyoda platform
- `repository/` ‚Äì Data access layer for Cyoda REST API operations
- `service/` ‚Äì `EntityService` interface and implementation for all Cyoda operations
- `serializer/` ‚Äì Serialization framework with fluent APIs (`ProcessorSerializer`, `CriterionSerializer`)
- `tool/` ‚Äì Utility tools like `WorkflowImportTool` for importing workflow configurations
- `util/` ‚Äì Various utility functions and helpers
- `workflow/` ‚Äì Core interfaces: `CyodaEntity`, `CyodaProcessor`, `CyodaCriterion`

**Key Framework Interfaces:**
- **`CyodaEntity`** - Base interface for all domain entities
- **`CyodaProcessor`** - Interface for workflow business logic components
- **`CyodaCriterion`** - Interface for workflow condition evaluation components
- **`EntityService`** - Service interface for all Cyoda data operations

> ‚ö†Ô∏è **IMPORTANT**: Never modify anything in the `common/` directory. This is framework code.

### `src/main/java/com/java_template/application/` - Your Business Logic (ADD AS NEEDED)

**Your Implementation Areas:**
- `controller/` ‚Äì REST endpoints and HTTP API controllers
- `entity/` ‚Äì Domain entities implementing `CyodaEntity` interface
- `processor/` ‚Äì Workflow processors implementing `CyodaProcessor` interface
- `criterion/` ‚Äì Workflow criteria implementing `CyodaCriterion` interface

## Code Examples and Best Practices
**All examples and templates are in the `src/test/java/com/example/` and `src/test/resources/example/` directories:**
- `src/test/java/com/example/application/controller/` - REST controller patterns
- `src/test/java/com/example/application/entity/`     - Entity class implementations
- `src/test/java/com/example/application/processor/`  - Workflow processor examples
- src/test/java/com/example/application/criterion/`   - Workflow criteria examples
- `src/test/java/com/example/application/patterns/`   - Patterns and anti-patterns guide
- `src/test/java/com/example/config/workflow/`        - Workflow JSON configuration templates
